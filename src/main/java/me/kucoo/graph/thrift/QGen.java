/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package me.kucoo.graph.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class QGen {

  public interface Iface {

    public List<Film> getPopularFilms(String level) throws org.apache.thrift.TException;

    public List<Question> getQuestions(short n, List<Film> films, Set<String> excludedSet) throws org.apache.thrift.TException;

    public List<Question> getRandomQuestions(short n, List<Film> films) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getPopularFilms(String level, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getPopularFilms_call> resultHandler) throws org.apache.thrift.TException;

    public void getQuestions(short n, List<Film> films, Set<String> excludedSet, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getQuestions_call> resultHandler) throws org.apache.thrift.TException;

    public void getRandomQuestions(short n, List<Film> films, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getRandomQuestions_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<Film> getPopularFilms(String level) throws org.apache.thrift.TException
    {
      send_getPopularFilms(level);
      return recv_getPopularFilms();
    }

    public void send_getPopularFilms(String level) throws org.apache.thrift.TException
    {
      getPopularFilms_args args = new getPopularFilms_args();
      args.setLevel(level);
      sendBase("getPopularFilms", args);
    }

    public List<Film> recv_getPopularFilms() throws org.apache.thrift.TException
    {
      getPopularFilms_result result = new getPopularFilms_result();
      receiveBase(result, "getPopularFilms");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPopularFilms failed: unknown result");
    }

    public List<Question> getQuestions(short n, List<Film> films, Set<String> excludedSet) throws org.apache.thrift.TException
    {
      send_getQuestions(n, films, excludedSet);
      return recv_getQuestions();
    }

    public void send_getQuestions(short n, List<Film> films, Set<String> excludedSet) throws org.apache.thrift.TException
    {
      getQuestions_args args = new getQuestions_args();
      args.setN(n);
      args.setFilms(films);
      args.setExcludedSet(excludedSet);
      sendBase("getQuestions", args);
    }

    public List<Question> recv_getQuestions() throws org.apache.thrift.TException
    {
      getQuestions_result result = new getQuestions_result();
      receiveBase(result, "getQuestions");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getQuestions failed: unknown result");
    }

    public List<Question> getRandomQuestions(short n, List<Film> films) throws org.apache.thrift.TException
    {
      send_getRandomQuestions(n, films);
      return recv_getRandomQuestions();
    }

    public void send_getRandomQuestions(short n, List<Film> films) throws org.apache.thrift.TException
    {
      getRandomQuestions_args args = new getRandomQuestions_args();
      args.setN(n);
      args.setFilms(films);
      sendBase("getRandomQuestions", args);
    }

    public List<Question> recv_getRandomQuestions() throws org.apache.thrift.TException
    {
      getRandomQuestions_result result = new getRandomQuestions_result();
      receiveBase(result, "getRandomQuestions");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRandomQuestions failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getPopularFilms(String level, org.apache.thrift.async.AsyncMethodCallback<getPopularFilms_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPopularFilms_call method_call = new getPopularFilms_call(level, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPopularFilms_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String level;
      public getPopularFilms_call(String level, org.apache.thrift.async.AsyncMethodCallback<getPopularFilms_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.level = level;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPopularFilms", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPopularFilms_args args = new getPopularFilms_args();
        args.setLevel(level);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Film> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPopularFilms();
      }
    }

    public void getQuestions(short n, List<Film> films, Set<String> excludedSet, org.apache.thrift.async.AsyncMethodCallback<getQuestions_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getQuestions_call method_call = new getQuestions_call(n, films, excludedSet, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getQuestions_call extends org.apache.thrift.async.TAsyncMethodCall {
      private short n;
      private List<Film> films;
      private Set<String> excludedSet;
      public getQuestions_call(short n, List<Film> films, Set<String> excludedSet, org.apache.thrift.async.AsyncMethodCallback<getQuestions_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.n = n;
        this.films = films;
        this.excludedSet = excludedSet;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getQuestions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getQuestions_args args = new getQuestions_args();
        args.setN(n);
        args.setFilms(films);
        args.setExcludedSet(excludedSet);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Question> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getQuestions();
      }
    }

    public void getRandomQuestions(short n, List<Film> films, org.apache.thrift.async.AsyncMethodCallback<getRandomQuestions_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRandomQuestions_call method_call = new getRandomQuestions_call(n, films, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRandomQuestions_call extends org.apache.thrift.async.TAsyncMethodCall {
      private short n;
      private List<Film> films;
      public getRandomQuestions_call(short n, List<Film> films, org.apache.thrift.async.AsyncMethodCallback<getRandomQuestions_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.n = n;
        this.films = films;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRandomQuestions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRandomQuestions_args args = new getRandomQuestions_args();
        args.setN(n);
        args.setFilms(films);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Question> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRandomQuestions();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getPopularFilms", new getPopularFilms());
      processMap.put("getQuestions", new getQuestions());
      processMap.put("getRandomQuestions", new getRandomQuestions());
      return processMap;
    }

    public static class getPopularFilms<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPopularFilms_args> {
      public getPopularFilms() {
        super("getPopularFilms");
      }

      public getPopularFilms_args getEmptyArgsInstance() {
        return new getPopularFilms_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPopularFilms_result getResult(I iface, getPopularFilms_args args) throws org.apache.thrift.TException {
        getPopularFilms_result result = new getPopularFilms_result();
        result.success = iface.getPopularFilms(args.level);
        return result;
      }
    }

    public static class getQuestions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getQuestions_args> {
      public getQuestions() {
        super("getQuestions");
      }

      public getQuestions_args getEmptyArgsInstance() {
        return new getQuestions_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getQuestions_result getResult(I iface, getQuestions_args args) throws org.apache.thrift.TException {
        getQuestions_result result = new getQuestions_result();
        result.success = iface.getQuestions(args.n, args.films, args.excludedSet);
        return result;
      }
    }

    public static class getRandomQuestions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRandomQuestions_args> {
      public getRandomQuestions() {
        super("getRandomQuestions");
      }

      public getRandomQuestions_args getEmptyArgsInstance() {
        return new getRandomQuestions_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRandomQuestions_result getResult(I iface, getRandomQuestions_args args) throws org.apache.thrift.TException {
        getRandomQuestions_result result = new getRandomQuestions_result();
        result.success = iface.getRandomQuestions(args.n, args.films);
        return result;
      }
    }

  }

  public static class getPopularFilms_args implements org.apache.thrift.TBase<getPopularFilms_args, getPopularFilms_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPopularFilms_args");

    private static final org.apache.thrift.protocol.TField LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("level", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPopularFilms_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPopularFilms_argsTupleSchemeFactory());
    }

    public String level; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LEVEL((short)1, "level");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LEVEL
            return LEVEL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LEVEL, new org.apache.thrift.meta_data.FieldMetaData("level", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPopularFilms_args.class, metaDataMap);
    }

    public getPopularFilms_args() {
    }

    public getPopularFilms_args(
      String level)
    {
      this();
      this.level = level;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPopularFilms_args(getPopularFilms_args other) {
      if (other.isSetLevel()) {
        this.level = other.level;
      }
    }

    public getPopularFilms_args deepCopy() {
      return new getPopularFilms_args(this);
    }

    @Override
    public void clear() {
      this.level = null;
    }

    public String getLevel() {
      return this.level;
    }

    public getPopularFilms_args setLevel(String level) {
      this.level = level;
      return this;
    }

    public void unsetLevel() {
      this.level = null;
    }

    /** Returns true if field level is set (has been assigned a value) and false otherwise */
    public boolean isSetLevel() {
      return this.level != null;
    }

    public void setLevelIsSet(boolean value) {
      if (!value) {
        this.level = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LEVEL:
        if (value == null) {
          unsetLevel();
        } else {
          setLevel((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LEVEL:
        return getLevel();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LEVEL:
        return isSetLevel();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPopularFilms_args)
        return this.equals((getPopularFilms_args)that);
      return false;
    }

    public boolean equals(getPopularFilms_args that) {
      if (that == null)
        return false;

      boolean this_present_level = true && this.isSetLevel();
      boolean that_present_level = true && that.isSetLevel();
      if (this_present_level || that_present_level) {
        if (!(this_present_level && that_present_level))
          return false;
        if (!this.level.equals(that.level))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPopularFilms_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPopularFilms_args typedOther = (getPopularFilms_args)other;

      lastComparison = Boolean.valueOf(isSetLevel()).compareTo(typedOther.isSetLevel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLevel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.level, typedOther.level);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPopularFilms_args(");
      boolean first = true;

      sb.append("level:");
      if (this.level == null) {
        sb.append("null");
      } else {
        sb.append(this.level);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPopularFilms_argsStandardSchemeFactory implements SchemeFactory {
      public getPopularFilms_argsStandardScheme getScheme() {
        return new getPopularFilms_argsStandardScheme();
      }
    }

    private static class getPopularFilms_argsStandardScheme extends StandardScheme<getPopularFilms_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPopularFilms_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LEVEL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.level = iprot.readString();
                struct.setLevelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPopularFilms_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.level != null) {
          oprot.writeFieldBegin(LEVEL_FIELD_DESC);
          oprot.writeString(struct.level);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPopularFilms_argsTupleSchemeFactory implements SchemeFactory {
      public getPopularFilms_argsTupleScheme getScheme() {
        return new getPopularFilms_argsTupleScheme();
      }
    }

    private static class getPopularFilms_argsTupleScheme extends TupleScheme<getPopularFilms_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPopularFilms_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLevel()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLevel()) {
          oprot.writeString(struct.level);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPopularFilms_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.level = iprot.readString();
          struct.setLevelIsSet(true);
        }
      }
    }

  }

  public static class getPopularFilms_result implements org.apache.thrift.TBase<getPopularFilms_result, getPopularFilms_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPopularFilms_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPopularFilms_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPopularFilms_resultTupleSchemeFactory());
    }

    public List<Film> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Film.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPopularFilms_result.class, metaDataMap);
    }

    public getPopularFilms_result() {
    }

    public getPopularFilms_result(
      List<Film> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPopularFilms_result(getPopularFilms_result other) {
      if (other.isSetSuccess()) {
        List<Film> __this__success = new ArrayList<Film>();
        for (Film other_element : other.success) {
          __this__success.add(new Film(other_element));
        }
        this.success = __this__success;
      }
    }

    public getPopularFilms_result deepCopy() {
      return new getPopularFilms_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Film> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Film elem) {
      if (this.success == null) {
        this.success = new ArrayList<Film>();
      }
      this.success.add(elem);
    }

    public List<Film> getSuccess() {
      return this.success;
    }

    public getPopularFilms_result setSuccess(List<Film> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Film>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPopularFilms_result)
        return this.equals((getPopularFilms_result)that);
      return false;
    }

    public boolean equals(getPopularFilms_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPopularFilms_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPopularFilms_result typedOther = (getPopularFilms_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPopularFilms_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPopularFilms_resultStandardSchemeFactory implements SchemeFactory {
      public getPopularFilms_resultStandardScheme getScheme() {
        return new getPopularFilms_resultStandardScheme();
      }
    }

    private static class getPopularFilms_resultStandardScheme extends StandardScheme<getPopularFilms_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPopularFilms_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<Film>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    Film _elem18; // required
                    _elem18 = new Film();
                    _elem18.read(iprot);
                    struct.success.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPopularFilms_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Film _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPopularFilms_resultTupleSchemeFactory implements SchemeFactory {
      public getPopularFilms_resultTupleScheme getScheme() {
        return new getPopularFilms_resultTupleScheme();
      }
    }

    private static class getPopularFilms_resultTupleScheme extends TupleScheme<getPopularFilms_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPopularFilms_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Film _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPopularFilms_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Film>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              Film _elem23; // required
              _elem23 = new Film();
              _elem23.read(iprot);
              struct.success.add(_elem23);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getQuestions_args implements org.apache.thrift.TBase<getQuestions_args, getQuestions_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getQuestions_args");

    private static final org.apache.thrift.protocol.TField N_FIELD_DESC = new org.apache.thrift.protocol.TField("n", org.apache.thrift.protocol.TType.I16, (short)1);
    private static final org.apache.thrift.protocol.TField FILMS_FIELD_DESC = new org.apache.thrift.protocol.TField("films", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField EXCLUDED_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("excludedSet", org.apache.thrift.protocol.TType.SET, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getQuestions_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getQuestions_argsTupleSchemeFactory());
    }

    public short n; // required
    public List<Film> films; // required
    public Set<String> excludedSet; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      N((short)1, "n"),
      FILMS((short)2, "films"),
      EXCLUDED_SET((short)3, "excludedSet");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // N
            return N;
          case 2: // FILMS
            return FILMS;
          case 3: // EXCLUDED_SET
            return EXCLUDED_SET;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __N_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.N, new org.apache.thrift.meta_data.FieldMetaData("n", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.FILMS, new org.apache.thrift.meta_data.FieldMetaData("films", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Film.class))));
      tmpMap.put(_Fields.EXCLUDED_SET, new org.apache.thrift.meta_data.FieldMetaData("excludedSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getQuestions_args.class, metaDataMap);
    }

    public getQuestions_args() {
    }

    public getQuestions_args(
      short n,
      List<Film> films,
      Set<String> excludedSet)
    {
      this();
      this.n = n;
      setNIsSet(true);
      this.films = films;
      this.excludedSet = excludedSet;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getQuestions_args(getQuestions_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.n = other.n;
      if (other.isSetFilms()) {
        List<Film> __this__films = new ArrayList<Film>();
        for (Film other_element : other.films) {
          __this__films.add(new Film(other_element));
        }
        this.films = __this__films;
      }
      if (other.isSetExcludedSet()) {
        Set<String> __this__excludedSet = new HashSet<String>();
        for (String other_element : other.excludedSet) {
          __this__excludedSet.add(other_element);
        }
        this.excludedSet = __this__excludedSet;
      }
    }

    public getQuestions_args deepCopy() {
      return new getQuestions_args(this);
    }

    @Override
    public void clear() {
      setNIsSet(false);
      this.n = 0;
      this.films = null;
      this.excludedSet = null;
    }

    public short getN() {
      return this.n;
    }

    public getQuestions_args setN(short n) {
      this.n = n;
      setNIsSet(true);
      return this;
    }

    public void unsetN() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __N_ISSET_ID);
    }

    /** Returns true if field n is set (has been assigned a value) and false otherwise */
    public boolean isSetN() {
      return EncodingUtils.testBit(__isset_bitfield, __N_ISSET_ID);
    }

    public void setNIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __N_ISSET_ID, value);
    }

    public int getFilmsSize() {
      return (this.films == null) ? 0 : this.films.size();
    }

    public java.util.Iterator<Film> getFilmsIterator() {
      return (this.films == null) ? null : this.films.iterator();
    }

    public void addToFilms(Film elem) {
      if (this.films == null) {
        this.films = new ArrayList<Film>();
      }
      this.films.add(elem);
    }

    public List<Film> getFilms() {
      return this.films;
    }

    public getQuestions_args setFilms(List<Film> films) {
      this.films = films;
      return this;
    }

    public void unsetFilms() {
      this.films = null;
    }

    /** Returns true if field films is set (has been assigned a value) and false otherwise */
    public boolean isSetFilms() {
      return this.films != null;
    }

    public void setFilmsIsSet(boolean value) {
      if (!value) {
        this.films = null;
      }
    }

    public int getExcludedSetSize() {
      return (this.excludedSet == null) ? 0 : this.excludedSet.size();
    }

    public java.util.Iterator<String> getExcludedSetIterator() {
      return (this.excludedSet == null) ? null : this.excludedSet.iterator();
    }

    public void addToExcludedSet(String elem) {
      if (this.excludedSet == null) {
        this.excludedSet = new HashSet<String>();
      }
      this.excludedSet.add(elem);
    }

    public Set<String> getExcludedSet() {
      return this.excludedSet;
    }

    public getQuestions_args setExcludedSet(Set<String> excludedSet) {
      this.excludedSet = excludedSet;
      return this;
    }

    public void unsetExcludedSet() {
      this.excludedSet = null;
    }

    /** Returns true if field excludedSet is set (has been assigned a value) and false otherwise */
    public boolean isSetExcludedSet() {
      return this.excludedSet != null;
    }

    public void setExcludedSetIsSet(boolean value) {
      if (!value) {
        this.excludedSet = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case N:
        if (value == null) {
          unsetN();
        } else {
          setN((Short)value);
        }
        break;

      case FILMS:
        if (value == null) {
          unsetFilms();
        } else {
          setFilms((List<Film>)value);
        }
        break;

      case EXCLUDED_SET:
        if (value == null) {
          unsetExcludedSet();
        } else {
          setExcludedSet((Set<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case N:
        return Short.valueOf(getN());

      case FILMS:
        return getFilms();

      case EXCLUDED_SET:
        return getExcludedSet();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case N:
        return isSetN();
      case FILMS:
        return isSetFilms();
      case EXCLUDED_SET:
        return isSetExcludedSet();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getQuestions_args)
        return this.equals((getQuestions_args)that);
      return false;
    }

    public boolean equals(getQuestions_args that) {
      if (that == null)
        return false;

      boolean this_present_n = true;
      boolean that_present_n = true;
      if (this_present_n || that_present_n) {
        if (!(this_present_n && that_present_n))
          return false;
        if (this.n != that.n)
          return false;
      }

      boolean this_present_films = true && this.isSetFilms();
      boolean that_present_films = true && that.isSetFilms();
      if (this_present_films || that_present_films) {
        if (!(this_present_films && that_present_films))
          return false;
        if (!this.films.equals(that.films))
          return false;
      }

      boolean this_present_excludedSet = true && this.isSetExcludedSet();
      boolean that_present_excludedSet = true && that.isSetExcludedSet();
      if (this_present_excludedSet || that_present_excludedSet) {
        if (!(this_present_excludedSet && that_present_excludedSet))
          return false;
        if (!this.excludedSet.equals(that.excludedSet))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getQuestions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getQuestions_args typedOther = (getQuestions_args)other;

      lastComparison = Boolean.valueOf(isSetN()).compareTo(typedOther.isSetN());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetN()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.n, typedOther.n);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFilms()).compareTo(typedOther.isSetFilms());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilms()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.films, typedOther.films);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExcludedSet()).compareTo(typedOther.isSetExcludedSet());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExcludedSet()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.excludedSet, typedOther.excludedSet);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getQuestions_args(");
      boolean first = true;

      sb.append("n:");
      sb.append(this.n);
      first = false;
      if (!first) sb.append(", ");
      sb.append("films:");
      if (this.films == null) {
        sb.append("null");
      } else {
        sb.append(this.films);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("excludedSet:");
      if (this.excludedSet == null) {
        sb.append("null");
      } else {
        sb.append(this.excludedSet);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getQuestions_argsStandardSchemeFactory implements SchemeFactory {
      public getQuestions_argsStandardScheme getScheme() {
        return new getQuestions_argsStandardScheme();
      }
    }

    private static class getQuestions_argsStandardScheme extends StandardScheme<getQuestions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getQuestions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // N
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.n = iprot.readI16();
                struct.setNIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FILMS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.films = new ArrayList<Film>(_list24.size);
                  for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                  {
                    Film _elem26; // required
                    _elem26 = new Film();
                    _elem26.read(iprot);
                    struct.films.add(_elem26);
                  }
                  iprot.readListEnd();
                }
                struct.setFilmsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // EXCLUDED_SET
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set27 = iprot.readSetBegin();
                  struct.excludedSet = new HashSet<String>(2*_set27.size);
                  for (int _i28 = 0; _i28 < _set27.size; ++_i28)
                  {
                    String _elem29; // required
                    _elem29 = iprot.readString();
                    struct.excludedSet.add(_elem29);
                  }
                  iprot.readSetEnd();
                }
                struct.setExcludedSetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getQuestions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(N_FIELD_DESC);
        oprot.writeI16(struct.n);
        oprot.writeFieldEnd();
        if (struct.films != null) {
          oprot.writeFieldBegin(FILMS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.films.size()));
            for (Film _iter30 : struct.films)
            {
              _iter30.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.excludedSet != null) {
          oprot.writeFieldBegin(EXCLUDED_SET_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.excludedSet.size()));
            for (String _iter31 : struct.excludedSet)
            {
              oprot.writeString(_iter31);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getQuestions_argsTupleSchemeFactory implements SchemeFactory {
      public getQuestions_argsTupleScheme getScheme() {
        return new getQuestions_argsTupleScheme();
      }
    }

    private static class getQuestions_argsTupleScheme extends TupleScheme<getQuestions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getQuestions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetN()) {
          optionals.set(0);
        }
        if (struct.isSetFilms()) {
          optionals.set(1);
        }
        if (struct.isSetExcludedSet()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetN()) {
          oprot.writeI16(struct.n);
        }
        if (struct.isSetFilms()) {
          {
            oprot.writeI32(struct.films.size());
            for (Film _iter32 : struct.films)
            {
              _iter32.write(oprot);
            }
          }
        }
        if (struct.isSetExcludedSet()) {
          {
            oprot.writeI32(struct.excludedSet.size());
            for (String _iter33 : struct.excludedSet)
            {
              oprot.writeString(_iter33);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getQuestions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.n = iprot.readI16();
          struct.setNIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list34 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.films = new ArrayList<Film>(_list34.size);
            for (int _i35 = 0; _i35 < _list34.size; ++_i35)
            {
              Film _elem36; // required
              _elem36 = new Film();
              _elem36.read(iprot);
              struct.films.add(_elem36);
            }
          }
          struct.setFilmsIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TSet _set37 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.excludedSet = new HashSet<String>(2*_set37.size);
            for (int _i38 = 0; _i38 < _set37.size; ++_i38)
            {
              String _elem39; // required
              _elem39 = iprot.readString();
              struct.excludedSet.add(_elem39);
            }
          }
          struct.setExcludedSetIsSet(true);
        }
      }
    }

  }

  public static class getQuestions_result implements org.apache.thrift.TBase<getQuestions_result, getQuestions_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getQuestions_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getQuestions_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getQuestions_resultTupleSchemeFactory());
    }

    public List<Question> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Question.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getQuestions_result.class, metaDataMap);
    }

    public getQuestions_result() {
    }

    public getQuestions_result(
      List<Question> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getQuestions_result(getQuestions_result other) {
      if (other.isSetSuccess()) {
        List<Question> __this__success = new ArrayList<Question>();
        for (Question other_element : other.success) {
          __this__success.add(new Question(other_element));
        }
        this.success = __this__success;
      }
    }

    public getQuestions_result deepCopy() {
      return new getQuestions_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Question> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Question elem) {
      if (this.success == null) {
        this.success = new ArrayList<Question>();
      }
      this.success.add(elem);
    }

    public List<Question> getSuccess() {
      return this.success;
    }

    public getQuestions_result setSuccess(List<Question> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Question>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getQuestions_result)
        return this.equals((getQuestions_result)that);
      return false;
    }

    public boolean equals(getQuestions_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getQuestions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getQuestions_result typedOther = (getQuestions_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getQuestions_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getQuestions_resultStandardSchemeFactory implements SchemeFactory {
      public getQuestions_resultStandardScheme getScheme() {
        return new getQuestions_resultStandardScheme();
      }
    }

    private static class getQuestions_resultStandardScheme extends StandardScheme<getQuestions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getQuestions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.success = new ArrayList<Question>(_list40.size);
                  for (int _i41 = 0; _i41 < _list40.size; ++_i41)
                  {
                    Question _elem42; // required
                    _elem42 = new Question();
                    _elem42.read(iprot);
                    struct.success.add(_elem42);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getQuestions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Question _iter43 : struct.success)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getQuestions_resultTupleSchemeFactory implements SchemeFactory {
      public getQuestions_resultTupleScheme getScheme() {
        return new getQuestions_resultTupleScheme();
      }
    }

    private static class getQuestions_resultTupleScheme extends TupleScheme<getQuestions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getQuestions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Question _iter44 : struct.success)
            {
              _iter44.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getQuestions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Question>(_list45.size);
            for (int _i46 = 0; _i46 < _list45.size; ++_i46)
            {
              Question _elem47; // required
              _elem47 = new Question();
              _elem47.read(iprot);
              struct.success.add(_elem47);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getRandomQuestions_args implements org.apache.thrift.TBase<getRandomQuestions_args, getRandomQuestions_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRandomQuestions_args");

    private static final org.apache.thrift.protocol.TField N_FIELD_DESC = new org.apache.thrift.protocol.TField("n", org.apache.thrift.protocol.TType.I16, (short)1);
    private static final org.apache.thrift.protocol.TField FILMS_FIELD_DESC = new org.apache.thrift.protocol.TField("films", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRandomQuestions_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRandomQuestions_argsTupleSchemeFactory());
    }

    public short n; // required
    public List<Film> films; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      N((short)1, "n"),
      FILMS((short)2, "films");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // N
            return N;
          case 2: // FILMS
            return FILMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __N_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.N, new org.apache.thrift.meta_data.FieldMetaData("n", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.FILMS, new org.apache.thrift.meta_data.FieldMetaData("films", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Film.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRandomQuestions_args.class, metaDataMap);
    }

    public getRandomQuestions_args() {
    }

    public getRandomQuestions_args(
      short n,
      List<Film> films)
    {
      this();
      this.n = n;
      setNIsSet(true);
      this.films = films;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRandomQuestions_args(getRandomQuestions_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.n = other.n;
      if (other.isSetFilms()) {
        List<Film> __this__films = new ArrayList<Film>();
        for (Film other_element : other.films) {
          __this__films.add(new Film(other_element));
        }
        this.films = __this__films;
      }
    }

    public getRandomQuestions_args deepCopy() {
      return new getRandomQuestions_args(this);
    }

    @Override
    public void clear() {
      setNIsSet(false);
      this.n = 0;
      this.films = null;
    }

    public short getN() {
      return this.n;
    }

    public getRandomQuestions_args setN(short n) {
      this.n = n;
      setNIsSet(true);
      return this;
    }

    public void unsetN() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __N_ISSET_ID);
    }

    /** Returns true if field n is set (has been assigned a value) and false otherwise */
    public boolean isSetN() {
      return EncodingUtils.testBit(__isset_bitfield, __N_ISSET_ID);
    }

    public void setNIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __N_ISSET_ID, value);
    }

    public int getFilmsSize() {
      return (this.films == null) ? 0 : this.films.size();
    }

    public java.util.Iterator<Film> getFilmsIterator() {
      return (this.films == null) ? null : this.films.iterator();
    }

    public void addToFilms(Film elem) {
      if (this.films == null) {
        this.films = new ArrayList<Film>();
      }
      this.films.add(elem);
    }

    public List<Film> getFilms() {
      return this.films;
    }

    public getRandomQuestions_args setFilms(List<Film> films) {
      this.films = films;
      return this;
    }

    public void unsetFilms() {
      this.films = null;
    }

    /** Returns true if field films is set (has been assigned a value) and false otherwise */
    public boolean isSetFilms() {
      return this.films != null;
    }

    public void setFilmsIsSet(boolean value) {
      if (!value) {
        this.films = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case N:
        if (value == null) {
          unsetN();
        } else {
          setN((Short)value);
        }
        break;

      case FILMS:
        if (value == null) {
          unsetFilms();
        } else {
          setFilms((List<Film>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case N:
        return Short.valueOf(getN());

      case FILMS:
        return getFilms();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case N:
        return isSetN();
      case FILMS:
        return isSetFilms();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRandomQuestions_args)
        return this.equals((getRandomQuestions_args)that);
      return false;
    }

    public boolean equals(getRandomQuestions_args that) {
      if (that == null)
        return false;

      boolean this_present_n = true;
      boolean that_present_n = true;
      if (this_present_n || that_present_n) {
        if (!(this_present_n && that_present_n))
          return false;
        if (this.n != that.n)
          return false;
      }

      boolean this_present_films = true && this.isSetFilms();
      boolean that_present_films = true && that.isSetFilms();
      if (this_present_films || that_present_films) {
        if (!(this_present_films && that_present_films))
          return false;
        if (!this.films.equals(that.films))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getRandomQuestions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getRandomQuestions_args typedOther = (getRandomQuestions_args)other;

      lastComparison = Boolean.valueOf(isSetN()).compareTo(typedOther.isSetN());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetN()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.n, typedOther.n);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFilms()).compareTo(typedOther.isSetFilms());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilms()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.films, typedOther.films);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRandomQuestions_args(");
      boolean first = true;

      sb.append("n:");
      sb.append(this.n);
      first = false;
      if (!first) sb.append(", ");
      sb.append("films:");
      if (this.films == null) {
        sb.append("null");
      } else {
        sb.append(this.films);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRandomQuestions_argsStandardSchemeFactory implements SchemeFactory {
      public getRandomQuestions_argsStandardScheme getScheme() {
        return new getRandomQuestions_argsStandardScheme();
      }
    }

    private static class getRandomQuestions_argsStandardScheme extends StandardScheme<getRandomQuestions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRandomQuestions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // N
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.n = iprot.readI16();
                struct.setNIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FILMS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.films = new ArrayList<Film>(_list48.size);
                  for (int _i49 = 0; _i49 < _list48.size; ++_i49)
                  {
                    Film _elem50; // required
                    _elem50 = new Film();
                    _elem50.read(iprot);
                    struct.films.add(_elem50);
                  }
                  iprot.readListEnd();
                }
                struct.setFilmsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRandomQuestions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(N_FIELD_DESC);
        oprot.writeI16(struct.n);
        oprot.writeFieldEnd();
        if (struct.films != null) {
          oprot.writeFieldBegin(FILMS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.films.size()));
            for (Film _iter51 : struct.films)
            {
              _iter51.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRandomQuestions_argsTupleSchemeFactory implements SchemeFactory {
      public getRandomQuestions_argsTupleScheme getScheme() {
        return new getRandomQuestions_argsTupleScheme();
      }
    }

    private static class getRandomQuestions_argsTupleScheme extends TupleScheme<getRandomQuestions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRandomQuestions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetN()) {
          optionals.set(0);
        }
        if (struct.isSetFilms()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetN()) {
          oprot.writeI16(struct.n);
        }
        if (struct.isSetFilms()) {
          {
            oprot.writeI32(struct.films.size());
            for (Film _iter52 : struct.films)
            {
              _iter52.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRandomQuestions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.n = iprot.readI16();
          struct.setNIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.films = new ArrayList<Film>(_list53.size);
            for (int _i54 = 0; _i54 < _list53.size; ++_i54)
            {
              Film _elem55; // required
              _elem55 = new Film();
              _elem55.read(iprot);
              struct.films.add(_elem55);
            }
          }
          struct.setFilmsIsSet(true);
        }
      }
    }

  }

  public static class getRandomQuestions_result implements org.apache.thrift.TBase<getRandomQuestions_result, getRandomQuestions_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRandomQuestions_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRandomQuestions_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRandomQuestions_resultTupleSchemeFactory());
    }

    public List<Question> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Question.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRandomQuestions_result.class, metaDataMap);
    }

    public getRandomQuestions_result() {
    }

    public getRandomQuestions_result(
      List<Question> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRandomQuestions_result(getRandomQuestions_result other) {
      if (other.isSetSuccess()) {
        List<Question> __this__success = new ArrayList<Question>();
        for (Question other_element : other.success) {
          __this__success.add(new Question(other_element));
        }
        this.success = __this__success;
      }
    }

    public getRandomQuestions_result deepCopy() {
      return new getRandomQuestions_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Question> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Question elem) {
      if (this.success == null) {
        this.success = new ArrayList<Question>();
      }
      this.success.add(elem);
    }

    public List<Question> getSuccess() {
      return this.success;
    }

    public getRandomQuestions_result setSuccess(List<Question> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Question>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRandomQuestions_result)
        return this.equals((getRandomQuestions_result)that);
      return false;
    }

    public boolean equals(getRandomQuestions_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getRandomQuestions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getRandomQuestions_result typedOther = (getRandomQuestions_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRandomQuestions_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRandomQuestions_resultStandardSchemeFactory implements SchemeFactory {
      public getRandomQuestions_resultStandardScheme getScheme() {
        return new getRandomQuestions_resultStandardScheme();
      }
    }

    private static class getRandomQuestions_resultStandardScheme extends StandardScheme<getRandomQuestions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRandomQuestions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.success = new ArrayList<Question>(_list56.size);
                  for (int _i57 = 0; _i57 < _list56.size; ++_i57)
                  {
                    Question _elem58; // required
                    _elem58 = new Question();
                    _elem58.read(iprot);
                    struct.success.add(_elem58);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRandomQuestions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Question _iter59 : struct.success)
            {
              _iter59.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRandomQuestions_resultTupleSchemeFactory implements SchemeFactory {
      public getRandomQuestions_resultTupleScheme getScheme() {
        return new getRandomQuestions_resultTupleScheme();
      }
    }

    private static class getRandomQuestions_resultTupleScheme extends TupleScheme<getRandomQuestions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRandomQuestions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Question _iter60 : struct.success)
            {
              _iter60.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRandomQuestions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Question>(_list61.size);
            for (int _i62 = 0; _i62 < _list61.size; ++_i62)
            {
              Question _elem63; // required
              _elem63 = new Question();
              _elem63.read(iprot);
              struct.success.add(_elem63);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
