/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package me.kucoo.graph.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Question implements org.apache.thrift.TBase<Question, Question._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Question");

  private static final org.apache.thrift.protocol.TField QUESTION_FIELD_DESC = new org.apache.thrift.protocol.TField("question", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ANSWERS_FIELD_DESC = new org.apache.thrift.protocol.TField("answers", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField CORRECT_ANSWER_FIELD_DESC = new org.apache.thrift.protocol.TField("correctAnswer", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField FACTS_FIELD_DESC = new org.apache.thrift.protocol.TField("facts", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QuestionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QuestionTupleSchemeFactory());
  }

  public String question; // required
  public List<String> answers; // required
  public short correctAnswer; // required
  public List<Fact> facts; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    QUESTION((short)1, "question"),
    ANSWERS((short)2, "answers"),
    CORRECT_ANSWER((short)3, "correctAnswer"),
    FACTS((short)4, "facts");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // QUESTION
          return QUESTION;
        case 2: // ANSWERS
          return ANSWERS;
        case 3: // CORRECT_ANSWER
          return CORRECT_ANSWER;
        case 4: // FACTS
          return FACTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CORRECTANSWER_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.QUESTION, new org.apache.thrift.meta_data.FieldMetaData("question", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ANSWERS, new org.apache.thrift.meta_data.FieldMetaData("answers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.CORRECT_ANSWER, new org.apache.thrift.meta_data.FieldMetaData("correctAnswer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.FACTS, new org.apache.thrift.meta_data.FieldMetaData("facts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Fact.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Question.class, metaDataMap);
  }

  public Question() {
  }

  public Question(
    String question,
    List<String> answers,
    short correctAnswer,
    List<Fact> facts)
  {
    this();
    this.question = question;
    this.answers = answers;
    this.correctAnswer = correctAnswer;
    setCorrectAnswerIsSet(true);
    this.facts = facts;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Question(Question other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetQuestion()) {
      this.question = other.question;
    }
    if (other.isSetAnswers()) {
      List<String> __this__answers = new ArrayList<String>();
      for (String other_element : other.answers) {
        __this__answers.add(other_element);
      }
      this.answers = __this__answers;
    }
    this.correctAnswer = other.correctAnswer;
    if (other.isSetFacts()) {
      List<Fact> __this__facts = new ArrayList<Fact>();
      for (Fact other_element : other.facts) {
        __this__facts.add(new Fact(other_element));
      }
      this.facts = __this__facts;
    }
  }

  public Question deepCopy() {
    return new Question(this);
  }

  @Override
  public void clear() {
    this.question = null;
    this.answers = null;
    setCorrectAnswerIsSet(false);
    this.correctAnswer = 0;
    this.facts = null;
  }

  public String getQuestion() {
    return this.question;
  }

  public Question setQuestion(String question) {
    this.question = question;
    return this;
  }

  public void unsetQuestion() {
    this.question = null;
  }

  /** Returns true if field question is set (has been assigned a value) and false otherwise */
  public boolean isSetQuestion() {
    return this.question != null;
  }

  public void setQuestionIsSet(boolean value) {
    if (!value) {
      this.question = null;
    }
  }

  public int getAnswersSize() {
    return (this.answers == null) ? 0 : this.answers.size();
  }

  public java.util.Iterator<String> getAnswersIterator() {
    return (this.answers == null) ? null : this.answers.iterator();
  }

  public void addToAnswers(String elem) {
    if (this.answers == null) {
      this.answers = new ArrayList<String>();
    }
    this.answers.add(elem);
  }

  public List<String> getAnswers() {
    return this.answers;
  }

  public Question setAnswers(List<String> answers) {
    this.answers = answers;
    return this;
  }

  public void unsetAnswers() {
    this.answers = null;
  }

  /** Returns true if field answers is set (has been assigned a value) and false otherwise */
  public boolean isSetAnswers() {
    return this.answers != null;
  }

  public void setAnswersIsSet(boolean value) {
    if (!value) {
      this.answers = null;
    }
  }

  public short getCorrectAnswer() {
    return this.correctAnswer;
  }

  public Question setCorrectAnswer(short correctAnswer) {
    this.correctAnswer = correctAnswer;
    setCorrectAnswerIsSet(true);
    return this;
  }

  public void unsetCorrectAnswer() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CORRECTANSWER_ISSET_ID);
  }

  /** Returns true if field correctAnswer is set (has been assigned a value) and false otherwise */
  public boolean isSetCorrectAnswer() {
    return EncodingUtils.testBit(__isset_bitfield, __CORRECTANSWER_ISSET_ID);
  }

  public void setCorrectAnswerIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CORRECTANSWER_ISSET_ID, value);
  }

  public int getFactsSize() {
    return (this.facts == null) ? 0 : this.facts.size();
  }

  public java.util.Iterator<Fact> getFactsIterator() {
    return (this.facts == null) ? null : this.facts.iterator();
  }

  public void addToFacts(Fact elem) {
    if (this.facts == null) {
      this.facts = new ArrayList<Fact>();
    }
    this.facts.add(elem);
  }

  public List<Fact> getFacts() {
    return this.facts;
  }

  public Question setFacts(List<Fact> facts) {
    this.facts = facts;
    return this;
  }

  public void unsetFacts() {
    this.facts = null;
  }

  /** Returns true if field facts is set (has been assigned a value) and false otherwise */
  public boolean isSetFacts() {
    return this.facts != null;
  }

  public void setFactsIsSet(boolean value) {
    if (!value) {
      this.facts = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case QUESTION:
      if (value == null) {
        unsetQuestion();
      } else {
        setQuestion((String)value);
      }
      break;

    case ANSWERS:
      if (value == null) {
        unsetAnswers();
      } else {
        setAnswers((List<String>)value);
      }
      break;

    case CORRECT_ANSWER:
      if (value == null) {
        unsetCorrectAnswer();
      } else {
        setCorrectAnswer((Short)value);
      }
      break;

    case FACTS:
      if (value == null) {
        unsetFacts();
      } else {
        setFacts((List<Fact>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case QUESTION:
      return getQuestion();

    case ANSWERS:
      return getAnswers();

    case CORRECT_ANSWER:
      return Short.valueOf(getCorrectAnswer());

    case FACTS:
      return getFacts();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case QUESTION:
      return isSetQuestion();
    case ANSWERS:
      return isSetAnswers();
    case CORRECT_ANSWER:
      return isSetCorrectAnswer();
    case FACTS:
      return isSetFacts();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Question)
      return this.equals((Question)that);
    return false;
  }

  public boolean equals(Question that) {
    if (that == null)
      return false;

    boolean this_present_question = true && this.isSetQuestion();
    boolean that_present_question = true && that.isSetQuestion();
    if (this_present_question || that_present_question) {
      if (!(this_present_question && that_present_question))
        return false;
      if (!this.question.equals(that.question))
        return false;
    }

    boolean this_present_answers = true && this.isSetAnswers();
    boolean that_present_answers = true && that.isSetAnswers();
    if (this_present_answers || that_present_answers) {
      if (!(this_present_answers && that_present_answers))
        return false;
      if (!this.answers.equals(that.answers))
        return false;
    }

    boolean this_present_correctAnswer = true;
    boolean that_present_correctAnswer = true;
    if (this_present_correctAnswer || that_present_correctAnswer) {
      if (!(this_present_correctAnswer && that_present_correctAnswer))
        return false;
      if (this.correctAnswer != that.correctAnswer)
        return false;
    }

    boolean this_present_facts = true && this.isSetFacts();
    boolean that_present_facts = true && that.isSetFacts();
    if (this_present_facts || that_present_facts) {
      if (!(this_present_facts && that_present_facts))
        return false;
      if (!this.facts.equals(that.facts))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Question other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Question typedOther = (Question)other;

    lastComparison = Boolean.valueOf(isSetQuestion()).compareTo(typedOther.isSetQuestion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuestion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.question, typedOther.question);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnswers()).compareTo(typedOther.isSetAnswers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnswers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.answers, typedOther.answers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCorrectAnswer()).compareTo(typedOther.isSetCorrectAnswer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCorrectAnswer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.correctAnswer, typedOther.correctAnswer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFacts()).compareTo(typedOther.isSetFacts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFacts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.facts, typedOther.facts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Question(");
    boolean first = true;

    sb.append("question:");
    if (this.question == null) {
      sb.append("null");
    } else {
      sb.append(this.question);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("answers:");
    if (this.answers == null) {
      sb.append("null");
    } else {
      sb.append(this.answers);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("correctAnswer:");
    sb.append(this.correctAnswer);
    first = false;
    if (!first) sb.append(", ");
    sb.append("facts:");
    if (this.facts == null) {
      sb.append("null");
    } else {
      sb.append(this.facts);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QuestionStandardSchemeFactory implements SchemeFactory {
    public QuestionStandardScheme getScheme() {
      return new QuestionStandardScheme();
    }
  }

  private static class QuestionStandardScheme extends StandardScheme<Question> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Question struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // QUESTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.question = iprot.readString();
              struct.setQuestionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ANSWERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.answers = new ArrayList<String>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  String _elem2; // required
                  _elem2 = iprot.readString();
                  struct.answers.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setAnswersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CORRECT_ANSWER
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.correctAnswer = iprot.readI16();
              struct.setCorrectAnswerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FACTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.facts = new ArrayList<Fact>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  Fact _elem5; // required
                  _elem5 = new Fact();
                  _elem5.read(iprot);
                  struct.facts.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setFactsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Question struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.question != null) {
        oprot.writeFieldBegin(QUESTION_FIELD_DESC);
        oprot.writeString(struct.question);
        oprot.writeFieldEnd();
      }
      if (struct.answers != null) {
        oprot.writeFieldBegin(ANSWERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.answers.size()));
          for (String _iter6 : struct.answers)
          {
            oprot.writeString(_iter6);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CORRECT_ANSWER_FIELD_DESC);
      oprot.writeI16(struct.correctAnswer);
      oprot.writeFieldEnd();
      if (struct.facts != null) {
        oprot.writeFieldBegin(FACTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.facts.size()));
          for (Fact _iter7 : struct.facts)
          {
            _iter7.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QuestionTupleSchemeFactory implements SchemeFactory {
    public QuestionTupleScheme getScheme() {
      return new QuestionTupleScheme();
    }
  }

  private static class QuestionTupleScheme extends TupleScheme<Question> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Question struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetQuestion()) {
        optionals.set(0);
      }
      if (struct.isSetAnswers()) {
        optionals.set(1);
      }
      if (struct.isSetCorrectAnswer()) {
        optionals.set(2);
      }
      if (struct.isSetFacts()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetQuestion()) {
        oprot.writeString(struct.question);
      }
      if (struct.isSetAnswers()) {
        {
          oprot.writeI32(struct.answers.size());
          for (String _iter8 : struct.answers)
          {
            oprot.writeString(_iter8);
          }
        }
      }
      if (struct.isSetCorrectAnswer()) {
        oprot.writeI16(struct.correctAnswer);
      }
      if (struct.isSetFacts()) {
        {
          oprot.writeI32(struct.facts.size());
          for (Fact _iter9 : struct.facts)
          {
            _iter9.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Question struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.question = iprot.readString();
        struct.setQuestionIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.answers = new ArrayList<String>(_list10.size);
          for (int _i11 = 0; _i11 < _list10.size; ++_i11)
          {
            String _elem12; // required
            _elem12 = iprot.readString();
            struct.answers.add(_elem12);
          }
        }
        struct.setAnswersIsSet(true);
      }
      if (incoming.get(2)) {
        struct.correctAnswer = iprot.readI16();
        struct.setCorrectAnswerIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.facts = new ArrayList<Fact>(_list13.size);
          for (int _i14 = 0; _i14 < _list13.size; ++_i14)
          {
            Fact _elem15; // required
            _elem15 = new Fact();
            _elem15.read(iprot);
            struct.facts.add(_elem15);
          }
        }
        struct.setFactsIsSet(true);
      }
    }
  }

}

